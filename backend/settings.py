"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 1.10.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import ast
import configparser
import os
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import subprocess
import time
from datetime import timedelta

import backend

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

INI_FILE = "settings.ini"
config = configparser.ConfigParser()
config.sections()
config.read(os.path.join( os.path.dirname(os.path.realpath(__file__)), INI_FILE))

# print("Fetching git tags ...")
# print(subprocess.check_output(["git", "fetch", "--tags"], cwd=BASE_DIR).decode('utf-8'))
# print(subprocess.check_output(["git", "fetch", "second-lab", "--tags"], cwd=BASE_DIR).decode('utf-8'))
# print("Fetching git tags ... Ok")
try:
    backend.__version__ = subprocess.check_output(["git", "describe", "--tags"], cwd=BASE_DIR).decode('utf-8')
    print('VERSION: %s' % backend.__version__)
except:
    backend.__version__ = 'unknown tag'
    print('VERSION does not set!!!!+')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'i==nzq%+dp6=uhcm_3c4j%*3uk*chksd&gm8akrla500qi^c*7'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config['Django']['DJANGO_DEBUG']

ALLOWED_HOSTS = ast.literal_eval(config['Django']['DJANGO_ALLOWED_HOSTS'])

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'rest_framework_swagger',
    'apps.auth_jwt',
    'apps.attribute',
    'apps.data_graph',
    'apps.data_bin',
    'apps.data_bin_loader',
    'apps.data_bin_loader.apps.loaders',
    'apps.data_bin_report',
    'apps.elastic',
    'apps.log',
    'apps.attribute_elastic',
    'apps.elastic.apps.elastic_settings',
    'apps.tests',
    'apps.email',
    'apps.git',
    'django_extensions',
#    'apps.config_after_all',
]

CORS_ORIGIN_ALLOW_ALL = True

# Rest Framework
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': config['Database']['DATABASE_ENGINE'],
        'NAME': config['Database']['DATABASE_NAME'],
        'USER': config['Database']['DATABASE_USER'],
        'PASSWORD': config['Database']['DATABASE_PASSWORD'],
        'HOST': config['Database']['DATABASE_HOST'],
        'PORT': config['Database']['DATABASE_PORT'],
        'TEST': {
            'NAME': config['Database']['TESTSUITE_DATABASE_NAME'],
        },
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'
#STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATICFILES_DIRS = (
        os.path.join(BASE_DIR, 'static'),
)

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# app_elastic
# ELASTIC_SEARCH_URL = 'http://172.16.9.88:9200'
# ELASTIC_SEARCH_URL = 'http://172.16.9.151:9200'
ELASTIC_SEARCH_URL = ''
ELASTIC_SEARCH_RESULT_NUMBER = config['Elasticsearch']['ELASTIC_SEARCH_RESULT_NUMBER']



SWAGGER_SETTINGS = {
    'JSON_EDITOR': True,
    'SECURITY_DEFINITIONS': {
        'basic': {
            'type': 'basic'
        },
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header',
            'template': 'Bearer {apiKey}',
        }
    },
}

LOGIN_URL = 'rest_framework:login'
LOGOUT_URL = 'rest_framework:logout'


timestr = time.strftime('%Y%m%d')
LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'standard': {
            # 'format': '%(asctime)s [%(levelname)s]- %(message)s'
            'format': '%(levelname)s %(asctime)s %(name)s.%(funcName)s:%(lineno)s - %(message)s'
        }
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'standard',
        },
        # 'file': {
        #     'level': 'DEBUG',
        #     'class': 'logging.FileHandler',
        #     # 'filename': '/var/log/flo/flo_backend.log', # os.path.join(BASE_DIR, 'logs/doc_manager.log'),
        #     'filename': os.path.join(BASE_DIR, 'tmp/logs/flo_backend%s.log' % timestr),
        #     'formatter': 'standard',
        #     'maxBytes': 10485760,
        #     # 'backupCount': 20,
        #     'encoding': 'utf8',
        # },
        'file': {
            'level': config['Logging']['LOGGING_FILE_LEVEL_LEVEL'],
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'flo_backend_%s.log' % timestr),
            # 'filename': '/var/log/flo/flo_backend_%s.log' % timestr,
            'formatter': 'standard',
            'maxBytes': 10485760,
            'backupCount': 20,
            'encoding': 'utf8',
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            # 'email_backend': 'django.core.mail.backends.smtp.EmailBackend',
            # 'include_html': True,
        },
        'my_send_mail': {
            'level': 'ERROR',
            'class': 'apps.email.handlers.SendMailHandler',
            'formatter': 'standard',
        }
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'DEBUG',
        },
        'apps': {
            'handlers': ['console', 'file', 'mail_admins'],
            'level': 'DEBUG',
        }
    }
}

# DEBUG
# INFO
# WARNING
# ERROR
# CRITIAL

ADMINS = ast.literal_eval(config['Email']['EMAIL_ADMINS'])
SERVER_EMAIL = config['Email']['EMAIL_SERVER_EMAIL']
EMAIL_TIMEOUT = config['Email']['EMAIL_TIMEOUT']

# Start local smtp server
# python -m smtpd -n -c DebuggingServer localhost:1025
# EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'
# EMAIL_HOST = '127.0.0.1'    # 'mail.gmail.com'
# EMAIL_PORT = 1025   # '465'
# EMAIL_FILE_PATH = os.path.join(BASE_DIR, 'tmp/emails')


# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = config['Email']['EMAIL_HOST']
EMAIL_PORT = config['Email']['EMAIL_PORT']
EMAIL_HOST_USER = config['Email']['EMAIL_PORT']
EMAIL_HOST_PASSWORD = config['Email']['EMAIL_HOST_PASSWORD']
EMAIL_USE_TLS = config['Email']['EMAIL_USE_TLS']
# EMAIL_USE_SSL = True


REPORTS_DIR = config['Reports']['REPORTS_DIR']